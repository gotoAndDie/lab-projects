<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" onload="parser()" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid meet">
<defs>
  <filter id="svg_1_blur" x="-50%" y="-50%" width="200%" height="200%">
   <feGaussianBlur stdDeviation="12"/>
  </filter>
  <linearGradient id="endshadgrad" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />
      <stop offset="50%" style="stop-color:rgb(0,0,0);stop-opacity:1" />  
      <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />
   </linearGradient>
</defs>
<rect x="-10000" y="-10000" width="20000" height="20000" style="fill:#000000" />
<rect x="0" y="0" width="100" height="100" style="fill:#263238" />
<rect id="col1" x="0" y="0" width="100" height="100" style="fill:#263238" />
<rect id="col2" x="0" y="0" width="100" height="100" style="fill:#263238" />
<rect id="col3" x="0" y="0" width="100" height="100" style="fill:#263238" />
<rect x="0" y="0" width="100" height="100" style="fill:#263238" />
<line id="hitbar" y2="85" x2="50" y1="85" x1="50" stroke-width="0.25" stroke="#cfd8dc" fill="none"/>
<text id="title" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="5" x="23" fill="#f0f0f0">RhyDrake by Group 2</text>
<g id="begintext" fill-opacity="1">
	<text xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="10" x="25" fill="#f0f0f0">- Press Space to start -</text>
	<text xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="15" x="18" fill="#f0f0f0">Use keys DFJK!</text>
</g>
<text id="scoretxt" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="5" x="50" fill="#f0f0f0">0</text>
<text id="ln1" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="90" x="17.5" fill="#f0f0f0">Key D</text>
<text id="ln2" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="90" x="37.5" fill="#f0f0f0">Key F</text>
<text id="ln3" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="90" x="57.5" fill="#f0f0f0">Key J</text>
<text id="ln4" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="90" x="77.5" fill="#f0f0f0">Key K</text>
<rect id="endshadow" x="0" y="0" width="100" height="100" fill="url(#endshadgrad)" fill-opacity="0" />
<text id="errorretard" x="98112.6" fill="#f0f0f0">aaa</text>
<text id="thankyou" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="82.5" x="50" fill="#ef9a9a" fill-opacity="0"> Thank you for playing! Press Enter to play again.</text>
<text id="misst" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="30" x="50" fill="#ef9a9a"></text>
<text id="badt" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="37.5" x="50" fill="#ffcc80"></text>
<text id="okt" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="45" x="50" fill="#fff59d"></text>
<text id="goodt" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="52.5" x="50" fill="#c5e1a5"></text>
<text id="greatt" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="60" x="50" fill="#80cbc4"></text>
<text id="perfectt" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="67.5" x="50" fill="#ce93d8"></text>
<text id="finalscore" xml:space="preserve" text-anchor="middle" font-family="Sans-serif" font-size="4" y="75" x="50" fill="#f0f0f0"></text>
<script xlink:href="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script>
<![CDATA[
//CSV parser. Turns CSV file into script for the game. Copied from the web and modified.
var left, right
function parser(){
$(document).ready(function() {
    $.ajax({
        type: "GET",
        url: "data.csv",
        dataType: "text",
        success: function(data) {processData(data);}
     });
});
function processData(allText) {
	//console.log(allText);
    var allTextLines = allText.split(/\r\n|\n/);
    var headers = allTextLines[0].split(',');
    left = [];
    right = [];

    for (var i=0; i < allTextLines.length-1; i++) {
        var data = allTextLines[i].split(',');
        left[i] = parseInt(data[0]);
        right[i] = parseInt(data[1]);
    }
    console.log(left);
    console.log(right);
}}
//End of parser.
//Adding the EventListener for keyboard presses.
var begintext = document.getElementById("begintext");
document.addEventListener('keydown', function(event) {
    switch (event.keyCode) {
		//Currently, it detects spacebar to begin the game, and the number keys 1, 2, 3 and 4 as input during the game. 
		//Nothing prevents you from pressing the number keys before the game starts. Feel free to lower your own score as you please.
		case 32:
		if (typeof right[1] != 'undefined' && prog === undefined){rhythmgame();begintext.setAttribute("fill-opacity", "0");exphitbar(0,1,document.getElementById("hitbar"));} //The game shouldn't start before the parser is finished! 
		break;
		case 68:
        if(prog != undefined){scoreeval(10);/*beat1.currentTime=0;beat1.play();*/}
		break;
		case 70:
        if(prog != undefined){scoreeval(30);/*beat2.currentTime=0;beat2.play();*/}
		break;
		case 74:
        if(prog != undefined){scoreeval(50);/*beat3.currentTime=0;beat3.play();*/}
		break;
		case 75:
        if(prog != undefined){scoreeval(70);/*beat4.currentTime=0;beat4.play();*/}
		break;
		case 13:
		if(end==true){location.reload()}
        break;
    }
}, true);
//I know, global variables are bad. It is the first time I programmed something more sophisticated than a calculator; I can do better next time.
/* Variable introduction:
 * notes: The array that holds the left column of the csv file. Controls which notes should play. Elements should be 1, 2, 3 or 4.
 * time: The array that holds the right column of the csv file. Controls when notes play; unit is one centibeat. That is, one hundredth of a beat.
 * prog: The progress-indicating variable. Extremely important; tracks the position in the song.
 * beatrate: The time taken for one centibeat to pass. Can be adjusted to the beat of the song. Is multiplied by time.
 * gonecount: The number of snowflakes that have gone offscreen. Used to reduce the overhead of the score-evaluating function.
 * score: The score. There is not a lot to say about this.
 * elemarray: The array that holds the generated svg elements. Used to move them down.
 * posx: The array of the x-position values of snowflakes. Has as many elements as there has ever been snowflakes; bad practise, but I'm not a good programmer yet. Used to determine to line the snowflake is on.
 * posy: The array of the y-position values of snowflakes. Like posx, but for y-position; used to determine proximity to the hitline.
 * end: Becomes true when can restart
 * scoretext and lnar are hopefully self-explanatory. They hold objects for manipulation.
 * variables named after ranks are hopefully self-explanatory
 * while setting stuff by document.getElementById just puts something into a variable
 */
var notes, time, prog, beatrate = 13.95348837209302, gonecount = 0, score = 0;
var miss=0,bad=0,ok=0,good=0,great=0,perfect=0, end = false;
var elemarray = [], posx = [], posy = [];
var scoretxt = document.getElementById("scoretxt");
var endshadow = document.getElementById("endshadow");
var misst = document.getElementById("misst");
var badt = document.getElementById("badt");
var okt = document.getElementById("okt");
var goodt = document.getElementById("goodt");
var greatt = document.getElementById("greatt");
var perfectt = document.getElementById("perfectt");
var finalscore = document.getElementById("finalscore");
var thankyou = document.getElementById("thankyou");
var lnar = [document.getElementById("ln1"), document.getElementById("ln2"), document.getElementById("ln3"), document.getElementById("ln4")];
lnar[99] = [document.getElementById("errorretard")] //suppresses one error. 
var hitding = new Audio('reflect.ogg');
var music = new Audio('music.ogg');
/*var beat1 = new Audio('beat1.ogg');
var beat2 = new Audio('beat2.ogg');
var beat3 = new Audio('beat3.ogg');
var beat4 = new Audio('beat4.ogg');*/

//BEGIN actual game
function rhythmgame(){
	console.log("start")
	notes = left;
	time = right; //Turns the generic left/right names of the parser into more useful names.
	//console.log(time);
	prog = 0; //Sets progress to zero
	setTimeout(function(){music.play()},600);
	rhyloop(); //begin the main loop!
}

function rhyloop(){
	//This is the main loop of the game. In this loop, the prog value is incremented for every note in the csv file.
	gendrake() //Invokes the function for generating snowflakes.
	//console.log(prog);
	//console.log(time[prog]);
	prog++;
	if (prog < notes.length) {setTimeout(function(){rhyloop();}, beatrate*time[prog-1])}
	else {setTimeout(function(){ending()},2000)}
}
//Generates the snowflake beat object.
function gendrake(){
	//defines some local variables used in the generation
	var elemgid = "elemg" + prog, elemg, elem, elem2;
	xmlns = "http://www.w3.org/2000/svg";
	//creating the group that wraps the two parts together
	elemg = document.createElementNS(xmlns, "g");
	elemg.setAttribute("id",elemgid);
	//creating the colored part
	elem = document.createElementNS(xmlns, "path");
	elem.setAttribute("d","m260.40914,0l-62.36354,35.4729l0,32.81913l41.87855,2.69952l-1.80404,28.26982l-33.72115,0.89548l-25.04085,18.64174l25.04085,19.11236l30.96934,0.47062l0,14.56304l-22.28904,0.90202l0.90202,25.0866l20.9164,0.90202l0.47062,17.26256l-46.42786,-21.81842l-4.55585,49.61108l-14.5565,-6.83051l9.53003,-19.11236l-20.485,-12.759l-12.759,20.01438l-13.65449,-8.63455l15.03366,-26.83835l-1.37917,-32.34851l-30.92358,12.28838l-15.92914,27.78613l-26.42002,-12.28185l18.21034,-34.61664l-29.1653,-17.31485l-60.98437,35.04804l-0.90202,71.521l28.68815,15.92914l22.28904,-33.244l25.518,14.08589l-17.78547,29.64246l3.17668,30.49218l30.96934,-11.85698l15.51082,-29.11955l15.45852,8.15739l-12.28185,20.96215l22.75965,13.18387l10.90921,-20.90986l16.41283,9.53003l-43.72834,31.87136l43.72834,31.86482l-16.41283,9.58232l-10.90921,-20.96215l-22.75965,13.22962l12.28185,21.39355l-15.45852,7.72599l-15.51082,-29.11955l-30.96934,-11.85045l-3.17668,30.49218l17.78547,29.59016l-25.518,14.13164l-22.28904,-33.244l-28.68815,16.41283l0.90202,70.99156l60.98437,35.09379l29.1653,-16.88345l-18.21034,-35.0415l26.42002,-12.28838l15.92914,27.79266l30.92358,12.28185l1.37917,-32.29622l-15.03366,-26.89064l13.65449,-8.67377l12.759,20.06013l20.485,-12.759l-9.53003,-19.11236l14.5565,-6.83051l4.55585,49.61108l46.42786,-21.86417l-0.47062,17.78547l-20.9164,0.47062l-0.90202,25.46571l22.28904,0.47716l0,14.5565l-30.96934,0.4314l-25.04085,19.15811l25.04085,18.6352l33.72115,0.94777l1.80404,28.22406l-41.87855,3.17668l0,32.29622l62.36354,35.56441l62.36354,-35.56441l0,-32.29622l-41.87855,-3.17668l1.80404,-28.22406l33.72115,-0.94777l25.04085,-18.6352l-25.04085,-19.15811l-31.44649,-0.4314l0,-14.5565l22.34133,-0.47716l-0.47716,-25.46571l-20.9164,-0.47062l-0.94777,-17.78547l46.48015,21.86417l4.98072,-49.61108l14.5565,6.83051l-9.53003,19.11236l20.485,12.759l12.28185,-20.06013l14.13164,8.67377l-15.03366,26.89064l0.90202,32.29622l31.40074,-12.28185l15.92914,-27.79266l26.42002,12.28838l-18.21034,35.0415l29.1653,16.88345l60.98437,-35.09379l0.90202,-70.99156l-28.68815,-16.41283l-22.28904,33.244l-25.518,-14.13164l17.30832,-29.59016l-2.69952,-30.49218l-30.96934,11.85045l-15.51082,29.11955l-15.93568,-7.72599l12.759,-21.39355l-22.75965,-13.22962l-10.90921,20.96215l-16.41283,-9.58232l43.72834,-31.86482l-43.72834,-31.87136l16.41283,-9.53003l10.90921,20.90986l22.75965,-13.18387l-12.759,-20.96215l15.93568,-8.15739l15.51082,29.11955l30.96934,11.85698l2.69952,-30.49218l-17.30832,-29.64246l25.518,-14.08589l22.28904,33.244l28.68815,-15.92914l-0.90202,-71.521l-60.98437,-35.04804l-29.1653,17.31485l18.21034,34.61664l-26.42002,12.28185l-15.92914,-27.78613l-31.40074,-12.28838l-0.90202,32.34851l15.03366,26.83835l-14.13164,8.63455l-12.28185,-20.01438l-20.485,12.759l9.53003,19.11236l-14.5565,6.83051l-4.98072,-49.61108l-46.48015,21.81842l0.94777,-17.26256l20.9164,-0.90202l0.47716,-25.0866l-22.34133,-0.90202l0,-14.56304l31.44649,-0.47062l25.04085,-19.11236l-25.04085,-18.64174l-33.72115,-0.89548l-1.80404,-28.26982l41.87855,-2.69952l0,-32.81913l-62.36354,-35.4729z");
	elem.setAttribute("stroke-miterlimit",10.433);
	//Changing the color depending on the line
	switch (notes[prog]){
		case 1:
		elem.setAttribute("fill","#00ffff");
		break;
		case 2:
		elem.setAttribute("fill","#ff0000");
		break;
		case 3:
		elem.setAttribute("fill","#ffff00");
		break;
		default:
		elem.setAttribute("fill","#00ff00");
	}
	//creating the blurry white part
	/* Allow me to give a little explanation:
	 * Let the variable for the object be elem.
	 * First, decide what kind of object you want. A group is "g", a rectangle is "rect", so on.
	 * Secondly, use setAttribute to set each attribute of the object. Each whatever="whateverelse" in the svg file becomes elem.setAttribute("whatever", "whateverelse").
	 * Well, online guides suggest using setAttributeNS(null, "whatever", "whateverelse"), but I can't see any difference here.
	 * Then, use document.documentElement.appendChild(elem) to put the object into the document. Success! You have now created an svg element in Javascript!
	 */
	elem2 = document.createElementNS(xmlns, "path");
	elem2.setAttribute("d","m260.40914,0l-62.36355,35.4729l0,32.81914l41.87855,2.69952l-1.80404,28.26982l-33.72115,0.89548l-25.04085,18.64174l25.04085,19.11235l30.96934,0.47062l0,14.56304l-22.28904,0.90202l0.90202,25.08661l20.9164,0.90202l0.47062,17.26256l-46.42787,-21.81842l-4.55585,49.61108l-14.5565,-6.83051l9.53003,-19.11236l-20.485,-12.759l-12.759,20.01438l-13.65448,-8.63455l15.03366,-26.83835l-1.37918,-32.34852l-30.92358,12.28839l-15.92915,27.78612l-26.42002,-12.28185l18.21034,-34.61663l-29.1653,-17.31486l-60.98437,35.04804l-0.90202,71.521l28.68815,15.92915l22.28903,-33.244l25.518,14.08589l-17.78547,29.64245l3.17668,30.49219l30.96934,-11.85699l15.51081,-29.11954l15.45853,8.15739l-12.28185,20.96215l22.75966,13.18387l10.9092,-20.90986l16.41284,9.53003l-43.72834,31.87136l43.72834,31.86482l-16.41284,9.58233l-10.9092,-20.96215l-22.75966,13.22962l12.28185,21.39355l-15.45853,7.72599l-15.51081,-29.11954l-30.96934,-11.85045l-3.17668,30.49219l17.78547,29.59016l-25.518,14.13164l-22.28903,-33.244l-28.68815,16.41284l0.90202,70.99156l60.98437,35.09379l29.1653,-16.88346l-18.21034,-35.0415l26.42002,-12.28838l15.92915,27.79266l30.92358,12.28185l1.37918,-32.29623l-15.03366,-26.89064l13.65448,-8.67377l12.759,20.06014l20.485,-12.75901l-9.53003,-19.11235l14.5565,-6.83051l4.55585,49.61107l46.42787,-21.86417l-0.47062,17.78548l-20.9164,0.47062l-0.90202,25.46571l22.28904,0.47715l0,14.55651l-30.96934,0.4314l-25.04085,19.15811l25.04085,18.6352l33.72115,0.94778l1.80404,28.22406l-41.87855,3.17668l0,32.29622l62.36355,35.56441l62.36354,-35.56441l0,-32.29622l-41.87855,-3.17668l1.80404,-28.22406l33.72115,-0.94778l25.04085,-18.6352l-25.04085,-19.15811l-31.44649,-0.4314l0,-14.55651l22.34133,-0.47715l-0.47716,-25.46571l-20.9164,-0.47062l-0.94777,-17.78548l46.48015,21.86417l4.98072,-49.61107l14.55651,6.83051l-9.53004,19.11235l20.485,12.75901l12.28185,-20.06014l14.13164,8.67377l-15.03366,26.89064l0.90202,32.29623l31.40074,-12.28185l15.92914,-27.79266l26.42002,12.28838l-18.21034,35.0415l29.16531,16.88346l60.98436,-35.09379l0.90202,-70.99156l-28.68814,-16.41284l-22.28904,33.244l-25.518,-14.13164l17.30832,-29.59016l-2.69952,-30.49219l-30.96934,11.85045l-15.51082,29.11954l-15.93568,-7.72599l12.759,-21.39355l-22.75965,-13.22962l-10.90921,20.96215l-16.41283,-9.58233l43.72834,-31.86482l-43.72834,-31.87136l16.41283,-9.53003l10.90921,20.90986l22.75965,-13.18387l-12.759,-20.96215l15.93568,-8.15739l15.51082,29.11954l30.96934,11.85699l2.69952,-30.49219l-17.30832,-29.64245l25.518,-14.08589l22.28904,33.244l28.68814,-15.92915l-0.90202,-71.521l-60.98436,-35.04804l-29.16531,17.31486l18.21034,34.61663l-26.42002,12.28185l-15.92914,-27.78612l-31.40074,-12.28839l-0.90202,32.34852l15.03366,26.83835l-14.13164,8.63455l-12.28185,-20.01438l-20.485,12.759l9.53004,19.11236l-14.55651,6.83051l-4.98072,-49.61108l-46.48015,21.81842l0.94777,-17.26256l20.9164,-0.90202l0.47716,-25.08661l-22.34133,-0.90202l0,-14.56304l31.44649,-0.47062l25.04085,-19.11235l-25.04085,-18.64174l-33.72115,-0.89548l-1.80404,-28.26982l41.87855,-2.69952l0,-32.81914l-62.36354,-35.4729z");
	elem2.setAttribute("stroke-miterlimit",10.433);
	elem2.setAttribute("fill","#ffffff");
	elem2.setAttribute("filter","url(#svg_1_blur)");
	//puting the two parts into the group
	elemg.appendChild(elem);
	elemg.appendChild(elem2);
	//puting the group into the document
	document.documentElement.appendChild(elemg);
	//and putting the group into elemarray
	elemarray[prog] = document.getElementById(elemgid);
	//console.log(elemarray[prog]);
	//stores the current prog in a local variable to calculate position values and pass into the senddown function
	var intprog = prog; 
	posx[intprog] = 20*notes[intprog]-10;
	posy[intprog] = -35;
	senddown(posx, posy, intprog)
}
//sends the object downwards.
function senddown(posx, posy, intprog){
	posy[intprog] = posy[intprog]+2 //The number 2 controls how fast the snowflake falls. There shouldn't be much need to change this, so it isn't a variable. Changing this won't hurt, though; the rhythm is unaffected by this value. We only have to change when it starts.
	elemarray[intprog].setAttribute("transform", "translate("+posx[intprog]+" "+posy[intprog]+") scale(0.03)" );
	if (posy[intprog] < 100){setTimeout(function(){senddown(posx, posy, intprog);}, 16.6666667)} //If it is not offscreen, repeat this 60-fps.
	else {gonecount++;
		if (posx[intprog] != 1990){score = score - 60; scoretxt.textContent = score; //decreases the score if a snowflake is missed, but not if the snowflake missed is the one placed far away to delay the starting time.
		miss++;
		lnar[(posx[intprog]+10)/20-1].textContent = "Miss"; //Displays a reddish miss text
		lnar[(posx[intprog]+10)/20-1].setAttribute("fill", "#ef9a9a");
		}
	}
}

function exphitbar(hbx, hbc, hitbar){
	//This function is invoked when Space is pressed to begin the game. It causes the hitbar to expand outwards.
	/* hbx: The length of the bar from the center.
	 * hbc: The counter that increments linearly to allow hbx to increase.
	 */
	hbx = 50*(1-1/((hbc+6)/6));
	hitbar.setAttribute("x1", 50+hbx);
	hitbar.setAttribute("x2", 50-hbx);
	hbc++;
	if (hbc<120) {setTimeout(function(){exphitbar(hbx,hbc, hitbar)}, 16.6666667)}; //repeats this every frame.
}

function scoreeval(loc){
	//This function evaluates the score gains/losses when either 1,2,3 or 4 is pressed.
	/* loc: Is a parameter. The expected x-position of the needed snowflakes.
	 * i, q: used in the for loop
	 * prox: The distance between the hitbar and the closest snowflake on the corresponding line when a button is pressed. Defaults to 999 because it is large.
	 * ln: The line number. Used to determine which text object to modify. It is nearly the inverse of the operation on line 66; that and this only needs to be executed once each per note, but loc is needed for every snowflake it scans through.
	 * posysy: where posy.length is temporaily stored to increase performance.
	 */
	var i, q, prox = 999, ln = (loc+10)/20-1, posysy = posy.length
	
	//Scans through the list of snowflakes onscreen, and puts the distance between the closest one and the hitbar in prox.
	for (i=gonecount; i<posysy; i++){
		if (posx[i]==loc && prox > Math.abs(85-posy[i])){
			prox = Math.abs(75-posy[i]);
			//Removes the snowflake by moving it to somewhere far if the keypress was close enough. 
			if (prox<15){posx[i]=1990}
		}
	}
	//console.log(ln);
	console.log("Proximity:" + prox);
	//Divides prox by 2, and then floors it. Prox from now on can only have integer values. Used to allow different speeds and faciliate score determination.
	prox = Math.floor(prox/2)
	switch (prox) {
		/*case 9:
		score = score - 40;
		lnar[ln].textContent = "OOPS";
		break;
		case 8:
		score = score - 20;
		lnar[ln].textContent = "Oops";
		break;
		case 7:
		score = score - 12;
		lnar[ln].textContent = "oops";
		break;
		case 6:
		score = score - 4;
		break*/ 
		//so I decided to not implement graded punishment for missing
		case 4:
		score = score + 20;
		bad++;
		hitding.currentTime=0;
		hitding.play();
		lnar[ln].textContent = "Bad"; 
		lnar[ln].setAttribute("fill", "#ffcc80") //Orange
		break;
		case 3:
		score = score + 40;
		ok++;
		hitding.currentTime=0;
		hitding.play();
		lnar[ln].textContent = "OK";
		lnar[ln].setAttribute("fill", "#fff59d"); //Yellow
		break;
		case 2:
		score = score + 80;
		good++;
		hitding.currentTime=0;
		hitding.play();
		lnar[ln].textContent = "Good";
		lnar[ln].setAttribute("fill", "#c5e1a5"); //Green
		break;
		case 1:
		score = score + 140;
		great++;
		hitding.currentTime=0;
		hitding.play();
		lnar[ln].textContent = "Great";
		lnar[ln].setAttribute("fill", "#80cbc4"); //Teal
		break;
		case 0:
		score = score + 200;
		perfect++;
		hitding.currentTime=0;
		hitding.play();
		lnar[ln].textContent = "Perfect";
		lnar[ln].setAttribute("fill", "#ce93d8"); //Purple
		break;
		default:
		score = score - 60;
		miss++;
		lnar[ln].textContent = "Miss";
		lnar[ln].setAttribute("fill", "#ef9a9a"); //Red
	}
	//Updates the text onscreen.
	scoretxt.textContent = score	
	//console.log(score);
}
function ending(){
	console.log("end");
	fadeblack(0);
	setTimeout(function(){endingtext()},2500);
}
function fadeblack(opac){
	opac++
	endshadow.setAttribute("fill-opacity", opac/300);
	if (opac<220) {setTimeout(function(){fadeblack(opac)},16.6666667)}
}
function endingtext(){
	misst.textContent = " Miss: " + miss + "    "
	badt.textContent = " Bad: " + bad + "    "
	okt.textContent = " OK: " + ok + "    "
	goodt.textContent = " Good: " + good + "    "
	greatt.textContent = " Great: " + great + "    "
	perfectt.textContent = " Perfect: " + perfect + "    "
	finalscore.textContent = " Your Final Score: " + score + "    "
	endtextfade(0)
}
function endtextfade(opac){
	opac ++;
	misst.setAttribute("fill-opacity", opac/400);
	badt.setAttribute("fill-opacity", (opac-40)/400);
	okt.setAttribute("fill-opacity", (opac-80)/400);
	goodt.setAttribute("fill-opacity", (opac-140)/400);
	greatt.setAttribute("fill-opacity", (opac-200)/400);
	perfectt.setAttribute("fill-opacity", (opac-280)/400);
	finalscore.setAttribute("fill-opacity", (opac-500)/400);
	thankyou.setAttribute("fill-opacity", (opac-1500)/900);
	if (opac<2400) {setTimeout(function(){endtextfade(opac),16.6666667})}
	else {end=true}
}
]]>
</script>
</svg>
